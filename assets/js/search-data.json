{
  
    
        "post0": {
            "title": "detrain main impluse response",
            "content": "library(autoFRK) library(sp) library(mgcv) library(autoFRK) library(ggplot2) library(colorRamps) library(grid) library(tidyverse) library(RColorBrewer) library(caret) . a1_train = read.csv(&#39;../input/2022-kaust-ss-competition-1a/1a_1_train.csv&#39;, row.names = 1) a1_test = read.csv(&#39;../input/2022-kaust-ss-competition-1a/1a_1_test.csv&#39;, row.names = 1) a2_train = read.csv(&#39;../input/2022-kaust-ss-competition-1a/1a_2_train.csv&#39;, row.names = 1) a2_test = read.csv(&#39;../input/2022-kaust-ss-competition-1a/1a_2_test.csv&#39;, row.names = 1) sample_submission_1 = read.csv(&#39;../input/2022-kaust-ss-competition-1a/1a_solution_sample1.csv&#39;) # submission &lt;- read.csv(&#39;a1yt_a2gpgp100.csv&#39;) . main_df &lt;- data.frame(a=a1_train$x+a1_train$y,z=a1_train$z) main_gam &lt;- gam(z~s(a,k=1000,bs=&quot;cr&quot;),data=main_df) ##### detrain main impluse response main_df %&gt;% ggplot() + aes(x=a, y=main_gam$fitted.values) + geom_point(color=&#39;black&#39;) + aes(x=a, y=z) + geom_line(color=&#39;blue&#39;, lwd=2) + theme_minimal() . myPalette &lt;- colorRampPalette(rev(brewer.pal(11, &quot;Spectral&quot;))) # color palette main_pred &lt;- predict(main_gam, data.frame(a=main_df$a)) demain_z &lt;- main_df$z - main_pred main_sc &lt;- scale_colour_gradientn(colours = myPalette(100), limits=c(min(demain_z), max(demain_z))) ggplot(a1_train, aes(x = x, y = y, colour = demain_z)) + geom_point() + main_sc . detrain second impluse response . sec_df &lt;- data.frame(x=a1_train$x, y=a1_train$y, z = demain_z) ctp = 1600 x_seq = (c(seq(0, 1, length.out = sqrt(ctp)))) y_seq = (c(seq(0, 1, length.out = sqrt(ctp)))) x_seq_2 = (c(seq(0, 0.125, length.out = sqrt(400)))) y_seq_2 = (c(seq(0, 0.125, length.out = sqrt(400)))) mt = expand.grid(c(x_seq, x_seq_2), c(y_seq, y_seq_2)) mbs = mrts(mt, k = 2000, x = sec_df[,c(1,2)]) . ctp = 1600 x_seq = (c(seq(0, 1, length.out = sqrt(ctp)))) y_seq = (c(seq(0, 1, length.out = sqrt(ctp)))) x_seq_2 = (c(seq(0, 0.125, length.out = sqrt(400)))) y_seq_2 = (c(seq(0, 0.125, length.out = sqrt(400)))) mt = expand.grid(c(x_seq, x_seq_2), c(y_seq, y_seq_2)) plot(mt) . mbs = cbind(as.matrix(mbs), demain_z) . write.csv(mbs, &#39;mbs.csv&#39;) . model = lm(formula = demain_z ~ ., data = as.data.frame(mbs)) . sec_pred = predict(model, as.data.frame(mbs)) . cat(&#39;Start fitting&#39;) desec_z &lt;- demain_z - sec_pred sec_sc &lt;- scale_colour_gradientn(colours = myPalette(100), limits=c(min(desec_z), max(desec_z))) ggplot(sec_df, aes(x = x, y = y, colour = desec_z)) + geom_point() + sec_sc . Predict Test . main = predict(main_gam, data.frame(a=a1_test$x+a1_test$y)) . sec_df &lt;- data.frame(x=a1_test$x, y=a1_test$y) ctp = 1600 x_seq = (c(seq(0, 1, length.out = sqrt(ctp)))) y_seq = (c(seq(0, 1, length.out = sqrt(ctp)))) x_seq_2 = (c(seq(0, 0.125, length.out = sqrt(400)))) y_seq_2 = (c(seq(0, 0.125, length.out = sqrt(400)))) mt = expand.grid(c(x_seq, x_seq_2), c(y_seq, y_seq_2)) mbs = mrts(mt, k = ctp+400, x = sec_df) . write.csv(mbs, &#39;mbs_test.csv&#39;) . sec = predict(model, as.data.frame(as.matrix(mbs))) . submission = read.csv(&#39;../input/a1yt-a2gpgp100/a1yt_a2gpgp100_pl.csv&#39;) mean(submission$z1 - (main+sec)) submission$z1 &lt;- main + sec write.csv(submission, &#39;submission.csv&#39;, row.names=F) .",
            "url": "https://dongdong-zoez.github.io/pythonAI/2022/05/18/mrts-baseline.html",
            "relUrl": "/2022/05/18/mrts-baseline.html",
            "date": " • May 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "SIVI",
            "content": "SIVI (Semi Implicity Variational Inference) . SIVI 是貝葉思推斷的進階觀念，在討論 SIVI 之前，我們先來談談何謂變分推斷、模型推斷、以及 SIVI 在解決什麼問題。 . 本文框架皆是在監督式學習以及統計的角度下看待神經網路和機器學習 . Model Inference . 模型推斷基本上是機器學習中最常用的技巧之一。我們手中的資料通常都是樣本的特徵 $x_i = (x_{i1}, cdots, x_{ip})$ 加上樣本對應的標籤 $y_i$，這樣成隊出現的資料有一個概率 $p(x,y)$，也就是我們蒐集到這筆資料的概率，或者說這筆資料是從一個機率分配 $p$ 產生的，可以是非常複雜的機率分配，也可以是非常簡單的 . 我們希望用蒐集到的資料來建立模型，最後可以用在測試集上預測，也就是窮舉所有的 $y$， 找一個 $y$ 使得 $y= arg max_{y’} p(y’ mid x_{new})$，這樣的問題可以透過貝葉思解決， 也就是透過 $p(x,y)=p(x mid y)p(y)$ 來估計 $p(y mid x)$ . p(y∣x)=p(x∣y)p(y)∫p(x∣y)p(y)dyp(y mid x) = frac{p(x mid y)p(y)}{ int p(x mid y)p(y)dy}p(y∣x)=∫p(x∣y)p(y)dyp(x∣y)p(y)​ . $p(x mid y)$ 可以是任何一個可解析形式，例如在樸素貝葉思中假設 $p(x mid y) sim N( mu_y, sigma^2_y)$。 由於先驗分配 $p(x)$ 積分運算太過複雜，上式中的解通常沒有一個可解析的形式。 變分推斷就是透過建立一個變分分配 $q(x)$ 來估計 $p(y mid x)$ . 變分推斷 . 在變分推斷中，我們會假設觀測值 $x$ 是被一個潛在變量 $z$ 影響，這到底是什麼意思呢? 我常常會舉這樣的一個例子，假設你今天看到小明出門帶雨傘，則小明帶雨傘是你的觀測值，那麼小明為什麼會帶雨傘呢? 你不知道，因為這是一個隱藏的變量，有可能是因為天氣預報，也有可能是因為他媽媽叫他帶的，不管是哪種都會影響小明做出要不要帶雨傘出門的決定，這就是隱變量，或者潛變量 . 我們前面提到，變分推斷希望找到一個變分分配 $q(z)$ 來代表 $p(z mid x)$，當然，我們希望這兩個分配的差別越小越好，一種計算這種分配之間的抽象距離是透過 KL 散度 . $ text{KL(q(z) |   | p(z mid x))} = log p(z mid x) + mathbb{E}_{q(z)}[ log q(z)- log p(x, z)]$ | . | $ text{ELBO}:$ - $ mathbb{E}_{q(z)}[ log q(z)- log p(x, z)]$ | $ text{Target}:$ Maximize $ text{ELBO}$ | . 我們的任務是盡量讓估計的分配與真實更為接近，也就是 $ min_{q(z)} text{KL(q(z) mid mid p(z mid x))}$，我們注意到在 KL 散度的第一項與 $q$ 無關，所以我們需要做的只有最小化後面第二項 (-ELBO)，也等同於最大化 $ text{ELBO}$。 . 那麼問題來了，這個 $q(z)$ 具體怎麼算呢? 有一種方法是 MFIV，他假設隱藏變量之間是沒有關係的，也就是 . q(z)=∏qi(zi)q(z) = prod q_i(z_i)q(z)=∏qi​(zi​) . 不過這種假設跟樸素貝葉思一樣，太過天真了!! 因為現實蒐集到的資料大多是有相關的。 . SIVI 半隱變分推斷 . 先講講何謂隱分配，如果我們不知道一個分配具體的形式長成什麼樣子，可是我們卻可以從中做取樣的動作，則這個分配稱為隱分配。 . 這樣講可能不是特別具體，設想神經網路的生成器，我們不知道生成器中做了什麼操作，但是我們可以給定一個特定的 noise 生成出我們想要的結果，也就是說我們從一個沒有具體形式的黑盒子中抽樣得到一筆新的 data，所以我們可以將神經網路看成是一種隱分配。 . 半隱分配 . SIVI 中的重點是定義了半隱分配，如果一個隱分配的形式可以寫成以下形似，則稱為半隱分配 . q(z)=∫qξ(z∣ψ)qϕ(ψ)dψq(z)= int q_ xi(z mid psi)q_ phi( psi)d psiq(z)=∫qξ​(z∣ψ)qϕ​(ψ)dψ . 上式中的 $ psi, phi$ 為兩個不同分配的參數，其中 . $q_ xi(z mid psi)$ 為可解析形式，也就是我們知道具體分配長什麼樣子 | $q_ phi( psi)$ 可為不可解析形式，也就是我們不知道具體分配長什麼樣子 | . 我們可以看到積分中一半為可解析，一半為不可解析，所以稱為’‘半隱’‘。事實上，任一個隱分配 $q(z)$ 都可以被半隱分配逼近的無限好 . qϕ(z)≈∫N(z∣μ,σ)qϕ(μ)dμ, σ2→0q_{ phi}(z) approx int N(z mid mu, sigma)q_{ phi}( mu)d mu, sigma^2 to 0qϕ​(z)≈∫N(z∣μ,σ)qϕ​(μ)dμ, σ2→0 . 舉例來說，我們可以設定 $q_ xi(z mid psi) sim N( mu_ psi, Sigma_ psi)$，其中 $ psi=T_ phi( epsilon)$ 有 $ epsilon sim N(0,1)$ . 抽樣問題 . 我們的目的是要從 $q(z)$ 中抽樣，所以我們只要能有效地從隱分配 $q_{ phi}( psi)$ 中抽樣即可 (因為 $q_ xi(z mid psi)$ 為可解析形式) . SIVI 估計 $q_{ phi}(z)$ 的核心概念是透過蒙地卡羅的方法 . q(z)=∫qξ(z∣ψ)qϕ(ψ)dψ≈1K∑k=1Kqϕ(z∣ψk),  ψk∼qϕ(ψ) begin{aligned} q(z)&amp;= int q_ xi(z mid psi)q_ phi( psi)d psi &amp; approx frac{1}{K} sum_{k=1}^Kq_ phi(z mid psi^k) , psi^k sim q_{ phi}( psi) end{aligned}q(z)​=∫qξ​(z∣ψ)qϕ​(ψ)dψ≈K1​k=1∑K​qϕ​(z∣ψk),  ψk∼qϕ​(ψ)​ . 舉例來說 $q_{ phi}( psi)$ 的抽樣可以是神經網路 $T_ phi( epsilon)$ 的輸出，其中 $ epsilon$ 是 noise，$ phi$ 是網路參數 . Optimization . 接下來我們來討論如何找到 $q(z)$，回顧一下我們的任務是最大化 $ text{ELBO}$，這部分的內容較多數學推導，有興趣的同學再去閱讀作者的原論文 SIVI，這裡我只擷取重點，對數學不感興趣的請直接跳到應用 . 根據 KL 散度的凹性 (計算高維分配的 KL 散度比計算邊際分配的 KL 散度在平均困難)，我們有 ELBO 的下界為 $ underline L(q(z mid psi),q_ phi( psi))=- mathbb{E}{ psi sim q phi( psi)} text{KL}(q(z mid psi) mid mid p(z mid x))+ log p(x)$ . Convexity: $ text{KL}( mathbb{E_ psi q(z) mid mid p(z mid x)}) leq mathbb{E_ psi} text{KL}(q(z) mid mid p(z mid x))$ | ELBO 下界: $ underline L(q(z mid psi),q_ phi( psi))=- mathbb{E}{ psi sim q phi( psi)} text{KL}(q(z mid psi) mid mid p(z mid x))+ log p(x)$ | . 但是我們注意到，如果直接優化 $ underline L$，會讓該式的解掉進 $ phi^’$，這樣並不是我們想要的，所以我們會在原本的目標函數中加上正則項來避免掉進局部極小值 . $ phi^’= arg max_ phi- mathbb{E}_{z sim q(z mid psi)} log frac{q(z mid psi)}{p(z,x)}$ | . Regularization . 我們在原本的 $ underline L$ 中加入了一個正則項 $B_K$ 來避免 SIVI 退化到一班的 VI . $B_k= mathbb{E}{ psi, psi^{(1)}, cdots, psi^{(k)} sim q phi( psi)} text{KL}(q(z mid psi) mid mid tilde h_K(z))$ | $ tilde h_K(z)= frac{q(z mid psi)+ sum q(z mid psi^{(k)})}{K+1}$ | 注意到 $B_K geq 0$ 且 $B_K = 0$ 僅且僅當 $K=0$ 或 $q_ phi( psi)= delta_{ phi^’}( psi^’)$ | . 所以我們的目標函數變成 $ underline L + B_K$，隨著我們抽樣的越多 ($K$ 越大)，$ underline L + B_K$ 會漸進收斂到 ELBO . L‾+BK=Eψ,ψ(1),⋯ ,ψ(k)∼qϕ(ψ)KL(q(z∣ψ)∣∣h~K(z))−Eψ∼qϕ(ψ)KL(q(z∣ψ)∣∣p(z∣x))+log⁡p(x) begin{aligned} underline L + B_K = &amp; mathbb{E}_{ psi, psi^{(1)}, cdots, psi^{(k)} sim q_ phi( psi)} text{KL}(q(z mid psi) mid mid tilde h_K(z)) -&amp; mathbb{E}_{ psi sim q_ phi( psi)} text{KL}(q(z mid psi) mid mid p(z mid x))+ log p(x) end{aligned}L​+BK​=−​Eψ,ψ(1),⋯,ψ(k)∼qϕ​(ψ)​KL(q(z∣ψ)∣∣h~K​(z))Eψ∼qϕ​(ψ)​KL(q(z∣ψ)∣∣p(z∣x))+logp(x)​ . Algorithm . . 應用 . SIVI 一個最大的應用是在變分自動編碼器上 (VAE)，接下來我們來談談什麼是 VAE，他又與我們今天的主題什麼關係 . VAE . 我們知道任何一張圖片或者一段文字都可以向量化來表示，換句話說，影像或者文字都來自於一個分配 $p(x)$，這些影像或者文字可能是被某種我們不知道的元素影響 (潛變量 $z$)，VAE 用 $q_{ phi}(z mid x)$ 來逼近 $p(x)$ ，試圖在潛在空間找到潛變量和輸入的關係，至於分配 $q(z mid mu(x, phi), sigma(x, phi))$ 的參數則是由編碼器訓練出來的，有 $z=e^ sigma epsilon+ mu$，其中 $ epsilon sim N(0,I)$，至此，我們得到任一樣本在潛空間的表現形式，可以想像成一種降維的方法，或者另一種編碼形式。假設我們輸入是一張 $512’512$ 的影像，如果分配 $q$ 的輸出維度為 $100$，那我們只需要 $100$ 維的向量就足夠表現原來這張圖片 . VAE 的極限 . 在一般形式的 VAE 中，所使用的 $q$ 分配通常為高斯分配，所以不管你的神經網路再怎麼厲害，潛變量 $z$ 仍然會服從高斯分配，這樣對厚尾或者有偏斜的資料很不友善，SIVI 的解決方案是新增更多的隨機層 ($M$)，並在每一層的輸入都加上 $ epsilon_t$ . . 你可能會好奇，SIVI $q_{ phi}(z mid x)$ 最後輸出不還是一個高斯分配嗎? 怎麼就特別了? 其實你注意到，當我們訓練完模型之後，模型的參數是已經固定了，給定一個樣本 $x_i$，$q_{ phi}(z mid x)$ 的參數都已經是一個確定的值了，雖然在普通 VAE 會在潛變量上加上一個 $ epsilon$ 確保結果在一定範圍內變化是一致的，但是仍舊是單一的高斯分配，SIVI 不一定，因為在每一層 Layer 都有加入一個隨機量，所以最後生成出來的結果是一個隨機向量，並不是一個定值，這樣就會讓你的分配產生不同的高斯分配 .",
            "url": "https://dongdong-zoez.github.io/pythonAI/markdown/2022/05/18/SIVI.html",
            "relUrl": "/markdown/2022/05/18/SIVI.html",
            "date": " • May 18, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dongdong-zoez.github.io/pythonAI/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dongdong-zoez.github.io/pythonAI/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dongdong-zoez.github.io/pythonAI/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dongdong-zoez.github.io/pythonAI/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}